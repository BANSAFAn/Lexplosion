name: CI Ч Windows build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build-windows:
    name: Build (Windows, MSBuild)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 6 SDK (дл€ тестов)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Locate MSBuild via vswhere
        shell: pwsh
        run: |
          $vswhere = "C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe"
          if (-not (Test-Path $vswhere)) { Write-Error "vswhere.exe not found at $vswhere"; exit 1 }
          $msbuildPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find **\\MSBuild\\**\\Bin\\MSBuild.exe | Select-Object -First 1
          if (-not $msbuildPath) { Write-Error "MSBuild.exe not found by vswhere"; exit 1 }
          Write-Host "Found MSBuild: $msbuildPath"
          echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_ENV

      - name: Restore packages (NuGet + dotnet)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $sln = Get-ChildItem -Recurse -Filter *.sln -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($sln) {
            Write-Host "NuGet restoring solution: $($sln.FullName)"
            nuget restore $sln.FullName
            Write-Host "dotnet restore solution: $($sln.FullName)"
            dotnet restore $sln.FullName
          } else {
            Write-Host "No .sln found Ч running dotnet restore for all csproj"
            Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
              Write-Host "dotnet restore $($_.FullName)"
              dotnet restore $_.FullName
            }
          }

      - name: Build Lexplosion.Core first (to create DLL/Lexplosion.Core.zip)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not $env:MSBUILD_PATH) { Write-Error "MSBUILD_PATH is not set"; exit 1 }
          $coreProj = Join-Path $PWD "src\Lexplosion.Core\Lexplosion.Core.csproj"
          if (Test-Path $coreProj) {
            Write-Host "Building core project: $coreProj"
            & $env:MSBUILD_PATH $coreProj /t:Rebuild /p:Configuration=Release
          } else {
            Write-Host "Core project not found at $coreProj Ч skipping explicit core build"
          }

      - name: Build solution (single-threaded to avoid PreBuild race)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (-not $env:MSBUILD_PATH) { Write-Error "MSBUILD_PATH is not set"; exit 1 }
          $sln = Get-ChildItem -Recurse -Filter *.sln -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($sln) {
            Write-Host "Building solution: $($sln.FullName)"
            & $env:MSBUILD_PATH $sln.FullName /m:1 /p:Configuration=Release
          } else {
            Write-Host "No .sln found Ч building all .csproj"
            Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
              Write-Host "Building project: $($_.FullName)"
              & $env:MSBUILD_PATH $_.FullName /t:Rebuild /p:Configuration=Release
            }
          }

      - name: Publish SDK-style projects for win-x64
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          mkdir -Force publish\windows
          $sdk_projects = Get-ChildItem -Recurse -Filter *.csproj | Where-Object { Select-String -Path $_.FullName -Pattern '<Project .*Sdk=' -Quiet }
          foreach ($p in $sdk_projects) {
            if (Select-String -Path $p.FullName -Pattern 'ProjectReference.*Lexplosion.Core' -Quiet -ErrorAction SilentlyContinue) {
              Write-Host "Skipping publish for $($p.FullName) Ч references legacy projects"
              continue
            }
            $name = [System.IO.Path]::GetFileNameWithoutExtension($p.FullName)
            Write-Host "dotnet publish $($p.FullName) -> publish/windows/$name"
            dotnet publish $p.FullName -c Release -r win-x64 --self-contained false -o "publish/windows/$name"
          }

      - name: Zip Windows artifact
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (Test-Path publish\windows) {
            Compress-Archive -Path publish\windows\* -DestinationPath publish\lexplosion-windows.zip -Force
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: lexplosion-windows
          path: publish/lexplosion-windows.zip

      - name: Setup Temurin JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Prepare Java files and drives for unit tests
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "JAVA_HOME: $env:JAVA_HOME"
          # Ensure expected Program Files path exists and contains java executables
          $expectedBase = 'C:\\Program Files\\Java\\jdk-17.0.1'
          $expectedBin = Join-Path $expectedBase 'bin'
          if (-not (Test-Path $expectedBin)) { New-Item -ItemType Directory -Force -Path $expectedBin | Out-Null }
          # Copy installed java executables if available to Program Files path
          if ($env:JAVA_HOME -and (Test-Path (Join-Path $env:JAVA_HOME 'bin\\java.exe'))) {
            Copy-Item -Path (Join-Path $env:JAVA_HOME 'bin\\java.exe') -Destination (Join-Path $expectedBin 'java.exe') -Force -ErrorAction SilentlyContinue
          } else {
            New-Item -Path (Join-Path $expectedBin 'java.exe') -ItemType File -Force | Out-Null
          }
          if ($env:JAVA_HOME -and (Test-Path (Join-Path $env:JAVA_HOME 'bin\\javaw.exe'))) {
            Copy-Item -Path (Join-Path $env:JAVA_HOME 'bin\\javaw.exe') -Destination (Join-Path $expectedBin 'javaw.exe') -Force -ErrorAction SilentlyContinue
          } else {
            New-Item -Path (Join-Path $expectedBin 'javaw.exe') -ItemType File -Force | Out-Null
          }

      - name: "Prepare N: paths for unit tests"
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          try { Remove-PSDrive -Name N -Force -ErrorAction SilentlyContinue } catch {}
          New-PSDrive -Name N -PSProvider FileSystem -Root $PWD -ErrorAction SilentlyContinue | Out-Null

          $relPaths = @(
            "Lexplosion\Lexplosion.WPF.NewInterface\bin\Debug\",
            "Lexplosion.WPF.NewInterface\bin\Debug\",
            "src\Lexplosion\Lexplosion.WPF.NewInterface\bin\Debug\",
            "src\Lexplosion.WPF.NewInterface\bin\Debug\",
            # additional variants rooted at repository root and at src
            "Lexplosion\Lexplosion\Lexplosion.WPF.NewInterface\bin\Debug\",
            "Lexplosion\src\Lexplosion.WPF.NewInterface\bin\Debug\"
          )

          foreach ($rp in $relPaths) {
            $full = Join-Path $PWD $rp
            if (-not (Test-Path $full)) {
              New-Item -ItemType Directory -Force -Path $full | Out-Null
              Write-Host "Created test directory: $full"
            } else {
              Write-Host "Test directory already exists: $full"
            }
            # Also ensure corresponding N: path exists
            $nPath = "N:\\" + ($rp -replace '/','\\')
            if (-not (Test-Path $nPath)) {
              New-Item -ItemType Directory -Force -Path $nPath | Out-Null
            }
            # ensure no java executables inside these directories
            Remove-Item -Path (Join-Path $full 'java.exe') -Force -ErrorAction SilentlyContinue
            Remove-Item -Path (Join-Path $full 'javaw.exe') -Force -ErrorAction SilentlyContinue
            Remove-Item -Path (Join-Path $nPath 'java.exe') -Force -ErrorAction SilentlyContinue
            Remove-Item -Path (Join-Path $nPath 'javaw.exe') -Force -ErrorAction SilentlyContinue
          }

      - name: Run tests (если есть .NET tests)
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "src/Lexplosion.Tests/Lexplosion.Tests.csproj") {
            dotnet test src/Lexplosion.Tests/Lexplosion.Tests.csproj --configuration Release --no-build
          } else {
            Write-Host "No test project found at src/Lexplosion.Tests/Lexplosion.Tests.csproj"
          }

      - name: Upload build artifacts (DLL/)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-dll
          path: src/DLL/**